// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"nfgo-ddd-showcase/internal/domain/auth"
	"nfgo-ddd-showcase/internal/infra"
	"nfgo-ddd-showcase/internal/interfaces"
	"nfgo-ddd-showcase/internal/interfaces/api"
	auth2 "nfgo-ddd-showcase/internal/interfaces/api/v1/auth"
	"nfgo-ddd-showcase/internal/interfaces/job"
	"nfgo-ddd-showcase/internal/interfaces/svc"
	auth3 "nfgo-ddd-showcase/internal/interfaces/svc/auth"
	"nfgo.ga/nfgo"
)

import (
	_ "github.com/go-resty/resty/v2"
	_ "nfgo-ddd-showcase/internal/interfaces/api/docs"
)

// Injectors from wire.go:

func NewShowcaseServer() (nfgo.Server, func()) {
	config, cleanup := newConfig()
	dbOper := infra.NewDBOper(config)
	server := interfaces.NewMetricsServer(config, dbOper)
	transactional := infra.NewTransactional(dbOper)
	authUserRepo := auth.NewAuthUserRepo(dbOper)
	authRoleRepo := auth.NewAuthRoleRepo(dbOper)
	redisPool, cleanup2 := infra.NewRedisPool(config)
	redisOper := infra.NewRedisOper(redisPool)
	cacheRepo := auth.NewCacheRepo(redisOper, config)
	replayChecker := infra.NewReplayChecker(config, redisOper)
	signKeyStore := infra.NewSignKeyStore(config, redisOper)
	iEnforcer := infra.NewEnforcer(config, dbOper)
	authService := auth.NewAuthService(transactional, authUserRepo, authRoleRepo, cacheRepo, replayChecker, signKeyStore, iEnforcer, config)
	authAPI := auth2.NewAuthAPI(authService, iEnforcer)
	webServer := api.NewWebServer(config, server, authAPI)
	authSvc := auth3.NewAuthSvc(authService)
	rpcServer := svc.NewRPCServer(config, server, authSvc)
	demoJob := job.NewDemoJob(authService)
	njobServer := job.NewJobServer(config, demoJob)
	nfgoServer := interfaces.NewServer(config, server, webServer, rpcServer, njobServer)
	return nfgoServer, func() {
		cleanup2()
		cleanup()
	}
}
